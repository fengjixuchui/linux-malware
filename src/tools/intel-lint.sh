#!/bin/sh

printf "Checking for incorrectly classified intel\n"
for intelfilename in intel/*
do
	if [ -z "$(egrep "Area([\\r\\n]+)(Press\/academia|Breach reports|Supply chain attacks|Malware reports|Malware binaries|Malware source|Malware PoCs|Offensive tools|Offensive techniques|Defensive tools|Defensive techniques|Defensive Yara|Personal rules|Other rules)" "${intelfilename}")" ]
	then
		intelid="$(jq .number "${intelfilename}")"
		inteltitle="$(jq .title "${intelfilename}")"
		printf "classification,%s,%s\n" "${intelfilename}" "${inteltitle}"
		gh issue edit "${intelid}" --add-label "missing:classification" --remove-label "confirmed" >/dev/null
	fi
done
printf "Checking for incorrectly missing tactics\n"
for intelfilename in intel/*
do
	if [ -z "$(egrep "Parent threat([\\r\\n]+)(Reconnaissance|Resource Development|Initial Access|Execution|Persistence|Privilege Escalation|Defense Evasion|Credential Access|Discovery|Lateral Movement|Collection|Command and Control|Exfiltration|Impact)" "${intelfilename}")" ]
	then
		intelid="$(jq .number "${intelfilename}")"
		inteltitle="$(jq .title "${intelfilename}")"
		printf "tactics,%s,%s\n" "${intelfilename}" "${inteltitle}"
		gh issue edit "${intelid}" --add-label "missing:tactics" --remove-label "confirmed" >/dev/null
	fi
done
printf "Checking for missing modules\n"
for intelfilename in intel/*
do
	jq .title "${intelfilename}" | tr -d "\"" | cut -f 2 -d " " | grep "github\.com" | while read intelurl
	do
		if [ -z "$(grep "${intelurl}" .gitmodules)" ]
		then
			intelid="$(jq .number "${intelfilename}")"
			intelarea="$(jq .body "${intelfilename}" | tr -d "\"" | sed -e "s/\\\r/|/g" -e "s/\\\n/|/g" -e "s/\"/|/g" | tr "|" "\n" | grep -A 4 Area | egrep "^[A-Z]")"
			if [ -z "$(grep "ignore:submodule" "${intelfilename}")" ]
			then
				printf "%s,%s\n" "${intelurl}" "${intelarea}"
				gh issue edit "${intelid}" --add-label "missing:submodule" --remove-label "confirmed" >/dev/null
			fi
		fi
	done
done
printf "Checking for missing malware\n"
for intelfilename in intel/*
do
	if [ -n "$(egrep "virustotal\.com|bazaar\.abuse\.ch|samples\.vx-underground\.org|analyze\.intezer\.com" "${intelfilename}")" ]
	then
		if [ -z "$(egrep "blob|tree" "${intelfilename}")" ]
		then
			intelid="$(jq .number "${intelfilename}")"
			inteltitle="$(jq .title "${intelfilename}" | tr -d "\"" | cut -f 2 -d " ")"
			if [ -z "$(grep "ignore:malware" "${intelfilename}")" ]
			then
				if [ -n "$(grep "wltm" "${intelfilename}")" ]
				then
					printf "wltm,%s,%s\n" "${intelfilename}" "${inteltitle}"
				else
					printf "!wltm,%s,%s\n" "${intelfilename}" "${inteltitle}"
				fi
				gh issue edit "${intelid}" --add-label "missing:malware" --remove-label "confirmed" >/dev/null
			fi
		fi
	fi
done
printf "Checking for tags\n"
for intelfilename in intel/*
do
	if [ -z "$(jq .labels[].name "${intelfilename}" | egrep "deprecated|duplicate|documentation|bug")" ]
	then
		jq .title "${intelfilename}" | tr -d "\"" | cut -f 2 -d " " | egrep -v "imgur\.com|github\.com|\.yara|youtu\.be" | sed "s/twitter\.com/nitter.net/g" | egrep -v "pdf|jpg|jpeg" | while read articleurl
		do
			articlefilename="$(printf "%s" "${articleurl}" | tr ":/" "__" | cut -f 1 -d "#")"
			if [ -z "$(printf "${articlefilename}" | grep htm)" ]
			then
				extension=".html"
			else
				extension=""
			fi
			if [ -f "articles/${articlefilename}${extension}" ]
			then
				intelid="$(jq .number "${intelfilename}")"
				printf "tags,%s," "${intelid}"
				src/tools/triage-binary.sh "articles/${articlefilename}${extension}" | cut -f 1 -d "]" | cut -f 2- -d : | tr "," "\n" | cut -f 2 -d: | sort | uniq | while read tag
				do
					printf "%s," "${tag}"
					if [ -z "$(grep ":tag:${tag}" "${intelfilename}")" ]
					then
						gh label create "missing:tag:${tag}" >/dev/null 2>&1
						gh label create "ignore:tag:${tag}" >/dev/null 2>&1
						gh issue edit "${intelid}" --add-label "missing:tag:${tag}" --remove-label "confirmed" >/dev/null
					fi
				done
				# TODO these tags don't have any alternative in binary-triage.sh
				for tag in JavaScript
				do
					if [ -n "$(grep "${tag}" "articles/${articlefilename}${extension}")" ]
					then
						printf "%s," "${tag}"
						if [ -z "$(grep "uses:${tag}" "${intelfilename}")" ]
						then
							gh label create "missing:tag:${tag}" >/dev/null 2>&1
							gh label create "ignore:tag:${tag}" >/dev/null 2>&1
							gh issue edit "${intelid}" --add-label "missing:tag:${tag}" --remove-label "confirmed" >/dev/null
						fi
					fi
				done
				# TODO these tags don't have any alternative in binary-triage.sh
				for tag in PyPI NPM
				do
					if [ -n "$(grep "${tag}" "articles/${articlefilename}${extension}")" ]
					then
						printf "%s," "${tag}"
						if [ -z "$(grep "delivery:${tag}" "${intelfilename}")" ]
						then
							gh label create "missing:tag:${tag}" >/dev/null 2>&1
							gh label create "ignore:tag:${tag}" >/dev/null 2>&1
							gh issue edit "${intelid}" --add-label "missing:tag:${tag}" --remove-label "confirmed" >/dev/null
						fi
					fi
				done
				printf "\n"
			fi
		done
	fi
done
